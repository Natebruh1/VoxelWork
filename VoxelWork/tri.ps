#version 440 core
#extension GL_ARB_bindless_texture : enable
#extension GL_NV_gpu_shader5 : enable
#extension GL_ARB_gpu_shader_int64 : enable

layout(std430, binding = 0) buffer TextureIndices {
    uint textureIndices[];
};
layout(std430, binding = 1) buffer lightingIndices {
    uint lightIndices[];
};


uniform uint64_t textureHandle; //Bindless Texture Handle

layout(location=0) out vec4 FragColor;
in float zDepth;
in vec3 voxCoords;
in vec2 texCoords;

flat in int ax;
void main()
{
    
    sampler2DArray textureArray = sampler2DArray(textureHandle);
    int xCoord=int(floor(voxCoords.x));
    int yCoord=int(floor(voxCoords.y));
    int zCoord=int(floor(voxCoords.z));
    

    highp vec2 texCoord;
    

    texCoord=fract(texCoords);
    
    texCoord = clamp(texCoord, 0.001, 0.999);
    texCoord = clamp(texCoord, 0.0, 1.0);
    texCoord=vec2(1.0)-texCoord; //Flip
    
    
    
    
    int texIndex=((xCoord*256+yCoord*16+zCoord)*12);
    if (textureIndices[texIndex] ==-1)
    {
        discard;
    }
    FragColor = texture(textureArray,vec3(vec2(texCoord),textureIndices[texIndex + ax]));


    int AOIndex=texIndex+6+ax;
    float AOPower=1.2;//1.

    //Get Light Power
    int lightLevelIndex=((xCoord*256+yCoord*16+zCoord)*6)+ax;
    uint LightLevel=lightIndices[lightLevelIndex];
    AOPower=AOPower/LightLevel;

    //AMBIENT OCCLUSION

    int bottomLeft=(int((textureIndices[AOIndex]&(1<<0))>0)+int((textureIndices[AOIndex]&(1<<1))>0)+int((textureIndices[AOIndex]&(1<<2))>0));
    int bottomRight=(int((textureIndices[AOIndex]&(1<<3))>0)+int((textureIndices[AOIndex]&(1<<4))>0)+int((textureIndices[AOIndex]&(1<<5))>0));
    int topRight=(int((textureIndices[AOIndex]&(1<<6))>0)+int((textureIndices[AOIndex]&(1<<7))>0)+int((textureIndices[AOIndex]&(1<<8))>0));
    int topLeft=(int((textureIndices[AOIndex]&(1<<9))>0)+int((textureIndices[AOIndex]&(1<<10))>0)+int((textureIndices[AOIndex]&(1<<11))>0));
    //Flip Back
    texCoord=vec2(1.0)-texCoord;

    //Ambient Occlusion
    float ambientValue=(1.0-texCoord.x)*(1.0-texCoord.y)*float(bottomLeft)+texCoord.x*(1.0-texCoord.y)*float(bottomRight)+texCoord.x*texCoord.y*float(topRight)+(1.0-texCoord.x)*texCoord.y*float(topLeft);
    
    FragColor=FragColor*(1.0-(ambientValue)*AOPower);
    
    
    
    switch (int(LightLevel))
    {
    case 0:
        FragColor = 0.2*FragColor;
        break;
    case 1:
        FragColor = 0.23*FragColor;
        break;
    case 2:
        FragColor = 0.26*FragColor;
        break;
    case 3:
        FragColor = 0.35*FragColor;
        break;
    case 4:
        FragColor = 0.50*FragColor;
        break;
    case 5:
        FragColor = 0.65*FragColor;
        break;
    case 6:
        FragColor = 0.8*FragColor;
        break;
    case 7:
        FragColor = 0.95*FragColor;
        break;
    case 8:
        FragColor = 1.0*FragColor;
        break;
    case 9:
        FragColor = 1.0*FragColor;
        break;
    case 10:
        FragColor = 1.0*FragColor;
        break;
    case 11:
        FragColor = 1.0*FragColor;
        break;
    case 12:
        FragColor = 1.1*FragColor;
        break;
    case 13:
        FragColor = 1.2*FragColor;
        break;
    case 14:
        FragColor = 1.2*FragColor;
        break;
    case 15:
        FragColor = 1.2*FragColor;
        break;
    }
    
    

    //FragColor = texture(textureArray,vec3(vec2(texCoord),float(textureIndices[texIndex])));
    
    //Nan or inf color vals
    //if (isnan(FragColor.x) || isinf(FragColor.x) || isnan(FragColor.y) || isinf(FragColor.y) || isnan(FragColor.z) || isinf(FragColor.z) || isnan(FragColor.w) || isinf(FragColor.w))
    //{
    //    FragColor=vec4(219.0/255.0,10.0/255.0,91.0/255.0,1.0);
    //}

    //TexCoord<0 or >1
    //if (texCoord.x<0.0 || texCoord.y<0.0 || texCoord.x>1.0 || texCoord.y>1.0)
    //{
    //    FragColor=vec4(219.0/255.0,10.0/255.0,91.0/255.0,1.0);
    //}

    //Tex coord inf/ nan
    //if (isnan(texCoord.x) || isnan(texCoord.y) || isinf(texCoord.x) || isinf(texCoord.y))
    //{
    //    FragColor=vec4(219.0/255.0,10.0/255.0,91.0/255.0,1.0);
    //}



    //if (textureHandle==0) //Debug to check if Bindless handle is zero
    //{
    //    FragColor = vec4(0.8, 0.05, 0.0, 1.0); // Debug: if handle is invalid
    //}
    //FragColor=vec4(vec3(0.8f*zDepth, 0.5f*zDepth, 0.2f*zDepth),1.0);
    
    //FragColor = vec4(xCoord,yCoord,zCoord,1.0);
    
}